{"version":3,"sources":["components/Card.jsx","components/HomePage.jsx","components/FavPage.jsx","components/LoginPage.jsx","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","CardContainer","Name","p","Actions","Left","Right","onClick","side","console","log","Card","name","image","rightClick","leftClick","alt","src","size","defaultProps","Home","useState","chars","setChars","nextChar","shift","length","useEffect","axios","get","then","res","data","results","char","renderCharacter","Hearth","span","FavPage","characters","role","aria-label","map","i","key","Button","button","LoginPage","Routes","exact","path","component","Navbar","App","className","activeClassName","to","Boolean","window","location","hostname","match","WithRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4caba99e.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport FontAwesome from 'react-fontawesome';\nimport PropTypes from 'prop-types';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  font-family: Avenir;\n  cursor: pointer;\n  min-width: 250px;\n  max-width: 450px;\n\n  span {\n    color: white;\n    font-size: 6rem;\n    transition: all 0.3s;\n  }\n`;\n\nconst CardContainer = styled.div`\n  background: #381460;\n  color: #eee;\n  width: 90%;\n  padding: 15px;\n  border-radius: 1rem;\n  box-sizing: border-box;\n  box-shadow: 0px 2px 10px black;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n\n  img {\n    height: auto;\n    width: 100%;\n  }\n`;\n\nconst Name = styled.p`\n  font-size: 2rem;\n  font-weight: bold;\n  margin: 30px 0 10px 0;\n`;\n\nconst Actions = styled.div`\n  transition: all 0.3s;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst Left = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(189, 195, 199, 0.7);\n  border-radius: 1rem 0 0 1rem;\n  &:hover span {\n    font-size: 7rem;\n  }\n`;\n\nconst Right = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(246, 36, 89, 0.7);\n  border-radius: 0 1rem 1rem 0;\n  &:hover span {\n    font-size: 7rem;\n  }\n`;\n\nlet rick = 'https://rickandmortyapi.com/api/character/avatar/1.jpeg';\n\nfunction onClick(side) {\n  return () => console.log(side);\n}\n\nexport default function Card({ name, image, rightClick, leftClick }) {\n  return (\n    <Container>\n      <CardContainer>\n        <img alt='rick' src={image} />\n        <Name>{name}</Name>\n        <Actions>\n          <Left onClick={leftClick || onClick('left')}>\n            <FontAwesome name='thumbs-down' size='2x' />\n          </Left>\n          <Right onClick={rightClick || onClick('right')}>\n            <FontAwesome name='heart' size='2x' />\n          </Right>\n        </Actions>\n      </CardContainer>\n    </Container>\n  );\n}\n\nCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  leftClick: PropTypes.func,\n  rightClick: PropTypes.func,\n};\n\nCard.defaultProps = {\n  name: 'Rick Sanches',\n  image: rick,\n};\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nimport Card from './Card';\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n`;\n\nlet URL = 'https://rickandmortyapi.com/api';\n\nexport default function Home() {\n  let [chars, setChars] = useState([]);\n\n  useEffect(() => {\n    getCharacters();\n  }, []);\n\n  function nextChar() {\n    chars.shift();\n    if (!chars.length) {\n      //get more characters\n    }\n    setChars([...chars]);\n  }\n\n  function renderCharacter() {\n    let char = chars[0];\n    return <Card leftClick={nextChar} {...char} />;\n  }\n\n  function getCharacters() {\n    return axios.get(`${URL}/character`).then(res => {\n      setChars(res.data.results);\n    });\n  }\n\n  return (\n    <Container>\n      <h2>Personajes</h2>\n      <div>{renderCharacter()}</div>\n    </Container>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Card from './Card';\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Hearth = styled.span`\n  font-size: 2rem;\n  margin: 10px 0 20px 0;\n`;\n\nexport default function FavPage({ characters = [0] }) {\n  function renderCharacter(char, i) {\n    return <Card key={i} />;\n  }\n  return (\n    <Container>\n      <Hearth>\n        <span role='img' aria-label='hearth'>\n          ❤️\n        </span>\n      </Hearth>\n      {characters.map(renderCharacter)}\n      {!characters.length && <h3>No hay personajes agregados</h3>}\n    </Container>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Button = styled.button`\n  padding: 20px 50px;\n  border: none;\n  margin: 20px 0px;\n  border-radius: 5px;\n  background-color: transparent;\n  color: orangered;\n  font-size: 1.2rem;\n  box-sizing: border-box;\n  transition: all 0.3s;\n  cursor: pointer;\n  border: 2px solid orangered;\n\n  &:hover {\n    background-color: orangered;\n    color: white;\n    border: 2px solid transparent;\n  }\n`;\n\nexport default function LoginPage() {\n  return (\n    <Container>\n      <h1>Inicia Sesión con Google</h1>\n      <h1>Cierra tu sesión</h1>\n      <Button>Iniciar</Button>\n      <Button>Cerrar Sesión</Button>\n    </Container>\n  );\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './components/HomePage';\nimport FavPage from './components/FavPage';\nimport LoginPage from './components/LoginPage';\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route exact path='/' component={Home} />\n      <Route path='/favs' component={FavPage} />\n      <Route path='/login' component={LoginPage} />\n    </Switch>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport { NavLink } from 'react-router-dom';\nimport Routes from './Routes';\n\nconst Navbar = styled.div`\n  margin-bottom: 20px;\n  width: 100%;\n  display: flex;\n  box-sizing: border-box;\n  font-weight: bold;\n  font-size: 1.5rem;\n`;\n\nconst App = () => {\n  return (\n    <>\n      <Navbar>\n        <NavLink className='link' activeClassName='active' exact to='/'>\n          Inicio\n        </NavLink>\n        <NavLink className='link' activeClassName='active' to='/favs'>\n          Favoritos\n        </NavLink>\n        <NavLink className='link' activeClassName='active' to='/login'>\n          Login\n        </NavLink>\n      </Navbar>\n      <Routes />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'font-awesome/css/font-awesome.css';\n\nlet WithRouter = () => (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nReactDOM.render(<WithRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}